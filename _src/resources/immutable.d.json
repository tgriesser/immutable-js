{"Immutable":{"doc":{"synopsis":"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n","description":"<p>While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.</p>\n"},"module":{"fromJS":{"call":{"doc":{"synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n","description":"<p>If a <code><span class=\"t param\">reviver</span></code> is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nrefering to each collection and the parent JS object provided as <code><span class=\"token var\" >this</span></code>.\nFor the top level, object, the key will be <code><span class=\"token string\" >\"\"</span></code>. This <code><span class=\"t param\">reviver</span></code> is expected\nto return a new Immutable Iterable, allowing for custom convertions from\ndeep JS objects.</p>\n<p>This example converts JSON to List and OrderedMap:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >var</span> isIndexed <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Iterable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >isIndexed<span class=\"token punctuation\" >(</span></span>value<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token keyword\" >return</span> isIndexed <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >toList<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span><span class=\"token function\" >toOrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// true, \"b\", {b: [10, 20, 30]}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"a\", {a: {b: [10, 20, 30]}, c: 40}\n</span><span class=\"token comment\" spellcheck=\"true\">// false, \"\", {\"\": {a: {b: [10, 20, 30]}, c: 40}}</span></code><p>If <code><span class=\"t param\">reviver</span></code> is not provided, the default behavior will convert Arrays into\nLists and Objects into Maps.</p>\n<p><code><span class=\"t param\">reviver</span></code> acts similarly to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\">same parameter in <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a></code></a>.</p>\n<p><code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>fromJS</code> is conservative in it&#39;s conversion. It will only convert\narrays which pass <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">Array.isArray</a></code> to Lists, and only raw objects (no custom\nprototype) to Map.</p>\n<code class=\"codeBlock\"> <span class=\"token string\" >\"Using the reviver parameter\"</span></code>"},"signatures":[{"params":[{"name":"json","type":{"k":0}},{"name":"reviver","optional":true,"type":{"k":6,"params":[{"name":"k","type":{"k":0}},{"name":"v","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":0}}}],"type":{"k":0},"line":21}]}},"is":{"call":{"doc":{"synopsis":"<p>Value equality check with semantics similar to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is</a></code>, but treats\nImmutable <code><a target=\"_self\" href=\"#/Iterable\">Iterable</a></code>s as values, equal if the second <code><a target=\"_self\" href=\"#/Iterable\">Iterable</a></code> contains\nequivalent values.</p>\n","description":"<p>It&#39;s used throughout Immutable when checking for equality, including <code><a target=\"_self\" href=\"#/Map\">Map</a></code>\nkey equality and <code><a target=\"_self\" href=\"#/Set\">Set</a></code> membership.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1 <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span><span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >false</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Note: Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is</a></code>, <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is</code> assumes <code><span class=\"token number\" >0</span></code> and <code><span class=\"token operator\" >-</span><span class=\"token number\" >0</span></code> are the same\nvalue, matching the behavior of ES6 Map key equality.</p>\n"},"signatures":[{"params":[{"name":"first","type":{"k":0}},{"name":"second","type":{"k":0}}],"type":{"k":1},"line":60}]}},"List":{"doc":{"synopsis":"<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n","description":"<p>Lists are immutable and fully persistent with O(log32 N) gets and sets,\nand O(1) push and pop.</p>\n<p>Lists implement Deque, with efficient addition and removal from both the\nend (<code><a target=\"_self\" href=\"#/List/push\">push</a></code>, <code><a target=\"_self\" href=\"#/List/pop\">pop</a></code>) and beginning (<code><a target=\"_self\" href=\"#/List/unshift\">unshift</a></code>, <code><a target=\"_self\" href=\"#/List/shift\">shift</a></code>).</p>\n<p>Unlike a JavaScript Array, there is no distinction between an\n&quot;unset&quot; index and an index set to <code><span class=\"token primitive\" >undefined</span></code>. <code><a target=\"_self\" href=\"#/List/forEach\">List#forEach</a></code> visits all\nindices from 0 to size, regardless of if they where explicitly defined.</p>\n"},"module":{"isList":{"call":{"doc":{"synopsis":"<p>True if the provided value is a List</p>\n"},"signatures":[{"params":[{"name":"maybeList","type":{"k":0}}],"type":{"k":1},"line":97}]}},"of":{"call":{"doc":{"synopsis":"<p>Creates a new List containing <code><span class=\"t param\">values</span></code>.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":102}]}}},"call":{"doc":{"synopsis":"<p>Create a new immutable List containing the values of the provided\niterable-like.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":108},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":114},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":115},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"List","args":[{"k":0}]},"line":116},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":117},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":118},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":119}]},"interface":{"line":120,"typeParams":["T"],"extends":[{"k":8,"name":"IndexedCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","members":{"#set":{"doc":{"synopsis":"<p>Returns a new List which includes <code><span class=\"t param\">value</span></code> at <code><span class=\"t param\">index</span></code>. If <code><span class=\"t param\">index</span></code> already\nexists in this List, it will be replaced.</p>\n","description":"<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nList. <code>v<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >)</span></code> sets the last item in the List.</p>\n<p>If <code><span class=\"t param\">index</span></code> larger than <code><a target=\"_self\" href=\"#/List/size\">size</a></code>, the returned List&#39;s <code><a target=\"_self\" href=\"#/List/size\">size</a></code> will be large\nenough to include the <code><span class=\"t param\">index</span></code>.</p>\n"},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":123}]},"#delete":{"doc":{"synopsis":"<p>Returns a new List which excludes this <code><span class=\"t param\">index</span></code> and with a size 1 less\nthan this List. Values at indicies above <code><span class=\"t param\">index</span></code> are shifted down by 1 to\nfill the position.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>This is synonymous with <code>list<span class=\"token punctuation\" >.</span><span class=\"token function\" >splice<span class=\"token punctuation\" >(</span></span>index<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code>.</p>\n<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nList. <code>v<span class=\"token punctuation\" >.</span><span class=\"token function\" >delete<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> deletes the last item in the List.</p>\n<p>Note: <code><span class=\"token keyword\" >delete</span></code> cannot be safely used in IE8</p>\n"},"signatures":[{"params":[{"name":"index","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":137}]},"#clear":{"doc":{"synopsis":"<p>Returns a new List with 0 size and no values.</p>\n"},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":153}]},"#push":{"doc":{"synopsis":"<p>Returns a new List with the provided <code><span class=\"t param\">values</span></code> appended, starting at this\nList&#39;s <code><a target=\"_self\" href=\"#/List/size\">size</a></code>.</p>\n"},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":158}]},"#pop":{"doc":{"synopsis":"<p>Returns a new List with a size ones less than this List, excluding\nthe last index in this List.</p>\n","description":"<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">Array#pop</a></code> because it returns a new\nList rather than the removed value. Use <code><a target=\"_self\" href=\"#/List/last\">last()</a></code> to get the last value\nin this List.</p>\n"},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":164}]},"#unshift":{"doc":{"synopsis":"<p>Returns a new List with the provided <code><span class=\"t param\">values</span></code> prepended, shifting other\nvalues ahead to higher indices.</p>\n"},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":174}]},"#shift":{"doc":{"synopsis":"<p>Returns a new List with a size ones less than this List, excluding\nthe first index in this List, shifting all other values to a lower index.</p>\n","description":"<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">Array#shift</a></code> because it returns a new\nList rather than the removed value. Use <code><a target=\"_self\" href=\"#/List/first\">first()</a></code> to get the first\nvalue in this List.</p>\n"},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":180}]},"#update":{"doc":{"synopsis":"<p>Returns a new List with an updated value at <code><span class=\"t param\">index</span></code> with the return\nvalue of calling <code><span class=\"t param\">updater</span></code> with the existing value, or <code><span class=\"t param\">notSetValue</span></code> if\n<code><span class=\"t param\">index</span></code> was not set. If called with a single argument, <code><span class=\"t param\">updater</span></code> is\ncalled with the List itself.</p>\n","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/update\">Map#update</a></code></p>\n"}],"description":"<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nList. <code>v<span class=\"token punctuation\" >.</span><span class=\"token function\" >update<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> updates the last item in the List.</p>\n"},"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":190},{"params":[{"name":"index","type":{"k":2}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":203},{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","type":{"k":7,"param":"T"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":204}]},"#merge":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/merge\">Map#merge</a></code></p>\n"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":205},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":210}]},"#mergeWith":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/mergeWith\">Map#mergeWith</a></code></p>\n"}]},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":211},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":219}]},"#mergeDeep":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/mergeDeep\">Map#mergeDeep</a></code></p>\n"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":223},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":228}]},"#mergeDeepWith":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/mergeDeepWith\">Map#mergeDeepWith</a></code></p>\n"}]},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":229},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":237}]},"#setSize":{"doc":{"synopsis":"<p>Returns a new List with size <code><span class=\"t param\">size</span></code>. If <code><span class=\"t param\">size</span></code> is less than this\nList&#39;s size, the new List will exclude values at the higher indices.\nIf <code><span class=\"t param\">size</span></code> is greater than this List&#39;s size, the new List will have\nundefined values for the newly available indices.</p>\n","description":"<p>When building a new List and the final size is known up front, <code>setSize</code>\nused in conjunction with <code><a target=\"_self\" href=\"#/List/withMutations\">withMutations</a></code> may result in the more\nperformant construction.</p>\n"},"signatures":[{"params":[{"name":"size","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":241}]}}},{"title":"Deep persistent changes","members":{"#setIn":{"doc":{"synopsis":"<p>Returns a new List having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n","description":"<p>Index numbers are used as keys to determine the path to follow in\nthe List.</p>\n"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":253},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":265}]},"#deleteIn":{"doc":{"synopsis":"<p>Returns a new List having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any\nkeys in <code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at\nthat key.</p>\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":266},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":275}]},"#updateIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/updateIn\">Map#updateIn</a></code></p>\n"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":278},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":286},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":291},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":295}]},"#mergeIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/mergeIn\">Map#mergeIn</a></code></p>\n"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":300},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":308},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":312}]},"#mergeDeepIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/mergeDeepIn\">Map#mergeDeepIn</a></code></p>\n"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":316},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":324},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":328}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/withMutations\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":332}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asMutable\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":340}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asImmutable\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":345}]}}}]}},"Map":{"doc":{"synopsis":"<p>Immutable Map is an unordered KeyedIterable of (key, value) pairs with\n<code><span class=\"token function\" >O<span class=\"token punctuation\" >(</span></span>log32 N<span class=\"token punctuation\" >)</span></code> gets and <code><span class=\"token function\" >O<span class=\"token punctuation\" >(</span></span>log32 N<span class=\"token punctuation\" >)</span></code> persistent sets.</p>\n","description":"<p>Iteration order of a Map is undefined, however is stable. Multiple\niterations of the same Map will iterate in the same order.</p>\n<p>Map&#39;s keys can be of any type, and use <code><a target=\"_self\" href=\"#/is\">Immutable.is</a></code> to determine key\nequality. This allows the use of any value (including NaN) as a key.</p>\n<p>Because <code><a target=\"_self\" href=\"#/is\">Immutable.is</a></code> returns equality based on value semantics, and\nImmutable collections are treated as values, any Immutable collection may\nbe used as a key.</p>\n<code class=\"codeBlock\"><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'listofone'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'listofone'</span></code><p>Any JavaScript object may be used as a key, however strict identity is used\nto evaluate key equality. Two similar looking objects will represent two\ndifferent keys.</p>\n<p>Implemented by a hash-array mapped trie.</p>\n"},"module":{"isMap":{"call":{"doc":{"synopsis":"<p>True if the provided value is a Map</p>\n"},"signatures":[{"params":[{"name":"maybeMap","type":{"k":0}}],"type":{"k":1},"line":377}]}}},"call":{"doc":{"synopsis":"<p>Creates a new Immutable Map.</p>\n","description":"<p>Created with the same key value pairs as the provided KeyedIterable or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> newMap <span class=\"token operator\" >=</span> <span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> newMap <span class=\"token operator\" >=</span> <span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":383},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":395},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":396},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":397},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":398},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":399},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":400}]},"interface":{"line":401,"typeParams":["K","V"],"extends":[{"k":8,"name":"KeyedCollection","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"title":"Persistent changes","members":{"#set":{"doc":{"synopsis":"<p>Returns a new Map also containing the new key, value pair. If an equivalent\nkey already exists in this Map, it will be replaced.</p>\n"},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":403}]},"#delete":{"doc":{"synopsis":"<p>Returns a new Map which excludes this <code><span class=\"t param\">key</span></code>.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>Note: <code><span class=\"token keyword\" >delete</span></code> cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API.</p>\n"},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":411}]},"#clear":{"doc":{"synopsis":"<p>Returns a new Map containing no keys or values.</p>\n"},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":421}]},"#update":{"doc":{"synopsis":"<p>Returns a new Map having updated the value at this <code><span class=\"t param\">key</span></code> with the return\nvalue of calling <code><span class=\"t param\">updater</span></code> with the existing value, or <code><span class=\"t param\">notSetValue</span></code> if\nthe key was not set. If called with only a single argument, <code><span class=\"t param\">updater</span></code> is\ncalled with the Map itself.</p>\n","description":"<p>Equivalent to: <code>map<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span>key<span class=\"token punctuation\" >,</span> <span class=\"token function\" >updater<span class=\"token punctuation\" >(</span></span>map<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span>key<span class=\"token punctuation\" >,</span> notSetValue<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>.</p>\n"},"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":426},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":436},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","type":{"k":7,"param":"V"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":437}]},"#merge":{"doc":{"synopsis":"<p>Returns a new Map resulting from merging the provided Iterables\n(or JS objects) into this Map. In other words, this takes each entry of\neach iterable and sets it on this Map.</p>\n","description":"<p>If any of the values provided to <code>merge</code> are not Iterable (would return\nfalse for <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>isIterable</code>) then they are deeply converted via\n<code><a target=\"_self\" href=\"#/fromJS\">Immutable.fromJS</a></code> before being merged. However, if the value is an\nIterable but contains non-iterable JS objects or arrays, those nested\nvalues will be preserved.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 50, b: 40, c: 30, d: 60 }\n</span>y<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>x<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { b: 20, a: 10, d: 60, c: 30 }</span></code>"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":438},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":457}]},"#mergeWith":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Map/merge\">merge()</a></code>, <code><span class=\"token function\" >mergeWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> returns a new Map resulting from merging\nthe provided Iterables (or JS objects) into this Map, but uses the\n<code><span class=\"t param\">merger</span></code> function for dealing with conflicts.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { a: 0.2, b: 0.5, c: 30, d: 60 }\n</span>y<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { b: 2, a: 5, d: 60, c: 30 }</span></code>"},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":458},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":474}]},"#mergeDeep":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Map/merge\">merge()</a></code>, but when two Iterables conflict, it merges them as well,\nrecursing deeply through the nested data.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeep<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// {a: { x: 2, y: 10 }, b: { x: 20, y: 5 }, c: { z: 3 } }</span></code>"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":478},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":489}]},"#mergeDeepWith":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Map/mergeDeep\">mergeDeep()</a></code>, but when two non-Iterables conflict, it uses the\n<code><span class=\"t param\">merger</span></code> function to determine the resulting value.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> x <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> y <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeepWith<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>prev<span class=\"token punctuation\" >,</span> next<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> prev <span class=\"token operator\" >/</span> next<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// {a: { x: 5, y: 10 }, b: { x: 20, y: 10 }, c: { z: 3 } }</span></code>"},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":490},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":505}]}}},{"title":"Deep persistent changes","members":{"#setIn":{"doc":{"synopsis":"<p>Returns a new Map having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":509},{"params":[{"name":"KeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":518}]},"#deleteIn":{"doc":{"synopsis":"<p>Returns a new Map having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any keys\nin <code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at\nthat key.</p>\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":519},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":528}]},"#updateIn":{"doc":{"synopsis":"<p>Returns a new Map having applied the <code><span class=\"t param\">updater</span></code> to the entry found at the\nkeyPath.</p>\n","description":"<p>If any keys in <code><span class=\"t param\">keyPath</span></code> do not exist, new Immutable <code><span class=\"token qualifier\" >Map</span></code>s will\nbe created at those keys. If the <code><span class=\"t param\">keyPath</span></code> does not already contain a\nvalue, the <code><span class=\"t param\">updater</span></code> function will be called with <code><span class=\"t param\">notSetValue</span></code>, if\nprovided, otherwise <code><span class=\"token primitive\" >undefined</span></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> data <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndata <span class=\"token operator\" >=</span> data<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> val <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> val <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { a: { b: { c: 20 } } }</span></code><p>If the <code><span class=\"t param\">updater</span></code> function returns the same value it was called with, then\nno change will occur. This is still true if <code><span class=\"t param\">notSetValue</span></code> is provided.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> data1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromJS<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndata2 <span class=\"token operator\" >=</span> data1<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >100</span><span class=\"token punctuation\" >,</span> val <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> val<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>data2 <span class=\"token operator\" >===</span> data1<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":531},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":557},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":562},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":566}]},"#mergeIn":{"doc":{"synopsis":"<p>A combination of <code><a target=\"_self\" href=\"#/Map/updateIn\">updateIn</a></code> and <code><a target=\"_self\" href=\"#/Map/merge\">merge</a></code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<code class=\"codeBlock\">x<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span><span class=\"token function\" >merge<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":571},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":585},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":589}]},"#mergeDeepIn":{"doc":{"synopsis":"<p>A combination of <code><a target=\"_self\" href=\"#/Map/updateIn\">updateIn</a></code> and <code><a target=\"_self\" href=\"#/Map/mergeDeep\">mergeDeep</a></code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<code class=\"codeBlock\">x<span class=\"token punctuation\" >.</span><span class=\"token function\" >updateIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeep<span class=\"token punctuation\" >(</span></span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nx<span class=\"token punctuation\" >.</span><span class=\"token function\" >mergeDeepIn<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":593},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":607},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":611}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n","description":"<p>If you need to apply a series of mutations to produce a new immutable\nMap, <code><span class=\"token function\" >withMutations<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like <code><a target=\"_self\" href=\"#/Map/merge\">merge</a></code> are done.</p>\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span><span class=\"token function\" >withMutations<span class=\"token punctuation\" >(</span></span>map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  map<span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >set<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map1<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token function\" >assert<span class=\"token punctuation\" >(</span></span>map2<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":615}]},"#asMutable":{"doc":{"synopsis":"<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\"token var\" >this</span></code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection. If possible, use <code><a target=\"_self\" href=\"#/Map/withMutations\">withMutations</a></code> as it provides an easier to\nuse API.</p>\n","description":"<p>Note: if the collection is already mutable, <code>asMutable</code> returns itself.</p>\n"},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":641}]},"#asImmutable":{"doc":{"synopsis":"<p>The yin to <code><a target=\"_self\" href=\"#/Map/asMutable\">asMutable</a></code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and returns itself. Once performed, the mutable\ncopy has become immutable and can be safely returned from a function.</p>\n"},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":653}]}}}]}},"OrderedMap":{"doc":{"synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n","description":"<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.</p>\n<p>Note that <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span></code> are more expensive than non-ordered <code><a target=\"_self\" href=\"#/Map\">Map</a></code> and may\nconsume more memory. <code><a target=\"_self\" href=\"#/OrderedMap/set\">OrderedMap#set</a></code> is amoratized O(log32 N), but not\nstable.</p>\n"},"module":{"isOrderedMap":{"call":{"doc":{"synopsis":"<p>True if the provided value is an OrderedMap.</p>\n"},"signatures":[{"params":[{"name":"maybeOrderedMap","type":{"k":0}}],"type":{"k":1},"line":676}]}}},"call":{"doc":{"synopsis":"<p>Creates a new Immutable OrderedMap.</p>\n","description":"<p>Created with the same key value pairs as the provided KeyedIterable or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.</p>\n<p>The iteration order of key-value pairs provided to this constructor will\nbe preserved in the OrderedMap.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> newOrderedMap <span class=\"token operator\" >=</span> <span class=\"token function\" >OrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >var</span> newOrderedMap <span class=\"token operator\" >=</span> <span class=\"token function\" >OrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":682},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":697},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":698},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":699},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":3},{"k":7,"param":"V"}]},"line":700},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":701},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":702}]},"interface":{"line":703,"typeParams":["K","V"],"extends":[{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]}},"Set":{"doc":{"synopsis":"<p>A Collection of unique values with <code><span class=\"token function\" >O<span class=\"token punctuation\" >(</span></span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n","description":"<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\norder of a Set is undefined, however is stable. Multiple iterations of the\nsame Set will iterate in the same order.</p>\n<p>Set values, like Map keys, may be of any type. Equality is determined using\n<code><a target=\"_self\" href=\"#/is\">Immutable.is</a></code>, enabling Sets to uniquely include other Immutable\ncollections, custom value types, and NaN.</p>\n"},"module":{"isSet":{"call":{"doc":{"synopsis":"<p>True if the provided value is a Set</p>\n"},"signatures":[{"params":[{"name":"maybeSet","type":{"k":0}}],"type":{"k":1},"line":719}]}},"of":{"call":{"doc":{"synopsis":"<p>Creates a new Set containing <code><span class=\"t param\">values</span></code>.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":724}]}},"fromKeys":{"call":{"doc":{"synopsis":"<p><code><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromKeys<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> creates a new immutable Set containing the keys from\nthis Iterable or JavaScript Object.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":729},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"Set","args":[{"k":3}]},"line":735}]}}},"call":{"doc":{"synopsis":"<p>Create a new immutable Set containing the values of the provided\niterable-like.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":737},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":743},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":744},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Set","args":[{"k":0}]},"line":745},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":746},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":747},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":748}]},"interface":{"line":749,"typeParams":["T"],"extends":[{"k":8,"name":"SetCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","members":{"#add":{"doc":{"synopsis":"<p>Returns a new Set which also includes this value.</p>\n"},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":751}]},"#delete":{"doc":{"synopsis":"<p>Returns a new Set which excludes this value.</p>\n","notes":[{"name":"alias","body":"remove"}],"description":"<p>Note: <code><span class=\"token keyword\" >delete</span></code> cannot be safely used in IE8</p>\n"},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":758}]},"#clear":{"doc":{"synopsis":"<p>Returns a new Set containing no values.</p>\n"},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":767}]},"#union":{"doc":{"synopsis":"<p>Returns a Set including any value from <code><span class=\"t param\">iterables</span></code> that does not already\nexist in this Set.</p>\n","notes":[{"name":"alias","body":"merge"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":772},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":779}]},"#intersect":{"doc":{"synopsis":"<p>Returns a Set which has removed any values not also contained\nwithin <code><span class=\"t param\">iterables</span></code>.</p>\n"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":782},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":789}]},"#subtract":{"doc":{"synopsis":"<p>Returns a Set excluding any values contained within <code><span class=\"t param\">iterables</span></code>.</p>\n"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":790},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":795}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/withMutations\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":796}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asMutable\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":804}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asImmutable\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":809}]}}}]}},"OrderedSet":{"doc":{"synopsis":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a target=\"_self\" href=\"#/OrderedSet/add\">add</a></code>ed.</p>\n","description":"<p>The iteration behavior of OrderedSet is the same as native ES6 Set.</p>\n<p>Note that <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span></code> are more expensive than non-ordered <code><a target=\"_self\" href=\"#/Set\">Set</a></code> and may\nconsume more memory. <code><a target=\"_self\" href=\"#/OrderedSet/add\">OrderedSet#add</a></code> is amoratized O(log32 N), but not\nstable.</p>\n"},"module":{"isOrderedSet":{"call":{"doc":{"synopsis":"<p>True if the provided value is an OrderedSet.</p>\n"},"signatures":[{"params":[{"name":"maybeOrderedSet","type":{"k":0}}],"type":{"k":1},"line":828}]}},"of":{"call":{"doc":{"synopsis":"<p>Creates a new OrderedSet containing <code><span class=\"t param\">values</span></code>.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":833}]}},"fromKeys":{"call":{"doc":{"synopsis":"<p><code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >fromKeys<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> creates a new immutable OrderedSet containing\nthe keys from this Iterable or JavaScript Object.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":838},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":3}]},"line":844}]}}},"call":{"doc":{"synopsis":"<p>Create a new immutable OrderedSet containing the values of the provided\niterable-like.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":846},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":852},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":853},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":0}]},"line":854},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":855},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":856},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":857}]},"interface":{"line":858,"typeParams":["T"],"extends":[{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}]}},"Stack":{"doc":{"synopsis":"<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code><span class=\"token function\" >unshift<span class=\"token punctuation\" >(</span></span>v<span class=\"token punctuation\" >)</span></code> and <code><a target=\"_self\" href=\"#/Stack/shift\">shift()</a></code>.</p>\n","description":"<p>For familiarity, Stack also provides <code><span class=\"token function\" >push<span class=\"token punctuation\" >(</span></span>v<span class=\"token punctuation\" >)</span></code>, <code><a target=\"_self\" href=\"#/Stack/pop\">pop()</a></code>, and <code><a target=\"_self\" href=\"#/Stack/peek\">peek()</a></code>, but\nbe aware that they also operate on the front of the list, unlike List or\na JavaScript Array.</p>\n<p>Note: <code><a target=\"_self\" href=\"#/Stack/reverse\">reverse()</a></code> or any inherent reverse traversal (<code><a target=\"_self\" href=\"#/Stack/reduceRight\">reduceRight</a></code>,\n<code><a target=\"_self\" href=\"#/Stack/lastIndexOf\">lastIndexOf</a></code>, etc.) is not efficient with a Stack.</p>\n<p>Stack is implemented with a Single-Linked List.</p>\n"},"module":{"isStack":{"call":{"doc":{"synopsis":"<p>True if the provided value is a Stack</p>\n"},"signatures":[{"params":[{"name":"maybeStack","type":{"k":0}}],"type":{"k":1},"line":876}]}},"of":{"call":{"doc":{"synopsis":"<p>Creates a new Stack containing <code><span class=\"t param\">values</span></code>.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":881}]}}},"call":{"doc":{"synopsis":"<p>Create a new immutable Stack containing the values of the provided\niterable-like.</p>\n","description":"<p>The iteration order of the provided iterable is preserved in the\nresulting <code><span class=\"token qualifier\" >Stack</span></code>.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":887},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":896},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":897},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":0}]},"line":898},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":899},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":900},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":901}]},"interface":{"line":902,"typeParams":["T"],"extends":[{"k":8,"name":"IndexedCollection","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","members":{"#peek":{"doc":{"synopsis":"<p>Alias for <code><a target=\"_self\" href=\"#/Stack/first\">Stack.first()</a></code>.</p>\n"},"signatures":[{"type":{"k":7,"param":"T"},"line":904}]}}},{"title":"Persistent changes","members":{"#clear":{"doc":{"synopsis":"<p>Returns a new Stack with 0 size and no values.</p>\n"},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":911}]},"#unshift":{"doc":{"synopsis":"<p>Returns a new Stack with the provided <code><span class=\"t param\">values</span></code> prepended, shifting other\nvalues ahead to higher indices.</p>\n","description":"<p>This is very efficient for Stack.</p>\n"},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":919}]},"#unshiftAll":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Stack/unshift\">Stack#unshift</a></code>, but accepts a iterable rather than varargs.</p>\n"},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":927},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":932}]},"#shift":{"doc":{"synopsis":"<p>Returns a new Stack with a size ones less than this Stack, excluding\nthe first item in this Stack, shifting all other values to a lower index.</p>\n","description":"<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">Array#shift</a></code> because it returns a new\nStack rather than the removed value. Use <code><a target=\"_self\" href=\"#/Stack/first\">first()</a></code> or <code><a target=\"_self\" href=\"#/Stack/peek\">peek()</a></code> to get the\nfirst value in this Stack.</p>\n"},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":933}]},"#push":{"doc":{"synopsis":"<p>Alias for <code><a target=\"_self\" href=\"#/Stack/unshift\">Stack#unshift</a></code> and is not equivalent to <code><a target=\"_self\" href=\"#/List/push\">List#push</a></code>.</p>\n"},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":943}]},"#pushAll":{"doc":{"synopsis":"<p>Alias for <code><a target=\"_self\" href=\"#/Stack/unshiftAll\">Stack#unshiftAll</a></code>.</p>\n"},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":948},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":953}]},"#pop":{"doc":{"synopsis":"<p>Alias for <code><a target=\"_self\" href=\"#/Stack/shift\">Stack#shift</a></code> and is not equivalent to <code><a target=\"_self\" href=\"#/List/pop\">List#pop</a></code>.</p>\n"},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":954}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/withMutations\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":959}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asMutable\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":967}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"<p><code><a target=\"_self\" href=\"#/Map/asImmutable\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":972}]}}}]}},"Range":{"call":{"doc":{"synopsis":"<p>Returns a IndexedSeq of numbers from <code><span class=\"t param\">start</span></code> (inclusive) to <code><span class=\"t param\">end</span></code>\n(exclusive), by <code><span class=\"t param\">step</span></code>, where <code><span class=\"t param\">start</span></code> defaults to 0, <code><span class=\"t param\">step</span></code> to 1, and <code><span class=\"t param\">end</span></code> to\ninfinity. When <code><span class=\"t param\">start</span></code> is equal to <code><span class=\"t param\">end</span></code>, returns empty range.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [0,1,2,3,...]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,11,12,13,...]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >15</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,11,12,13,14]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [10,15,20,25]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [30,25,20,15]\n</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// []</span></code>"},"signatures":[{"params":[{"name":"start","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}},{"name":"step","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":2}]},"line":978}]}},"Repeat":{"call":{"doc":{"synopsis":"<p>Returns a IndexedSeq of <code><span class=\"t param\">value</span></code> repeated <code><span class=\"t param\">times</span></code> times. When <code><span class=\"t param\">times</span></code> is\nnot defined, returns an infinite <code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> of <code><span class=\"t param\">value</span></code>.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Repeat<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'foo'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// ['foo','foo','foo',...]\n</span><span class=\"token function\" >Repeat<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'bar'</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// ['bar','bar','bar','bar']</span></code>"},"signatures":[{"typeParams":["T"],"params":[{"name":"value","type":{"k":7,"param":"T"}},{"name":"times","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":994}]}},"Record":{"doc":{"synopsis":"<p>Creates a new Class which produces Record instances. A record is similar to\na JS object, but enforce a specific set of allowed string keys, and have\ndefault values.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> ABRecord <span class=\"token operator\" >=</span> <span class=\"token function\" >Record<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></code><p>Records always have a value for the keys they define. <code>remove</code>ing a key\nfrom a record simply resets it to the default value for that key.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>size <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 1\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecordWithoutB <span class=\"token operator\" >=</span> myRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >remove<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span>\nmyRecordWithoutB<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 2\n</span>myRecordWithoutB<span class=\"token punctuation\" >.</span>size <span class=\"token comment\" spellcheck=\"true\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\nbe ignored:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >:</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\nas expected, however property sets will throw an Error.</p>\n<p>Note: IE8 does not support property access. Only use <code><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> when\nsupporting IE8.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span> <span class=\"token comment\" spellcheck=\"true\">// throws Error</span></code><p>Record Classes can be extended as well, allowing for custom methods on your\nRecord. This is not a common pattern in functional environments, but is in\nmany JS programs.</p>\n<p>Note: TypeScript does not support this type of subclassing.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >ABRecord</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token function\" >getAB<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >+</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>b<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token function\" >getAB<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 4</span></code>"},"module":{"Class":{"interface":{"line":1057}}},"call":{"signatures":[{"params":[{"name":"defaultValues","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}},{"name":"name","optional":true,"type":{"k":3}}],"type":{"k":8,"name":"Class","qualifier":["Record"]},"line":1063}]}},"Seq":{"doc":{"synopsis":"<p>Represents a sequence of values, but may not be backed by a concrete data\nstructure.</p>\n","description":"<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any\nmutative method called on a <code><span class=\"token qualifier\" >Seq</span></code> will return a new <code><span class=\"token qualifier\" >Seq</span></code>.</p>\n<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any\nmethod call. Values are often created during iteration, including implicit\niteration when reducing or converting to a concrete data structure such as\na <code><a target=\"_self\" href=\"#/List\">List</a></code> or JavaScript <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></code>.</p>\n<p>For example, the following performs no work, because the resulting\nSeq&#39;s values are never iterated:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> oddSquares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >7</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >8</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Once the Seq is used, it performs only the work necessary. In this\nexample, no intermediate data structures are ever created, filter is only\ncalled three times, and map is only called twice:</p>\n<code class=\"codeBlock\">console<span class=\"token punctuation\" >.</span><span class=\"token function\" >log<span class=\"token punctuation\" >(</span></span>evenSquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span></code><p>Seq allows for the efficient chaining of operations,\nallowing for the expression of logic that can otherwise be very tedious:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>key <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> key<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise be memory or time limited:</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Range<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skip<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1000</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token operator\" >-</span>n<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >take<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >reduce<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>r<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> r <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1006008</span></code><p>Seq is often used to provide a rich collection API to JavaScript Object.</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toObject<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { x: 0, y: 2, z: 4 }</span></code>"},"module":{"isSeq":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeSeq</span></code> is a Seq, it is not backed by a concrete\nstructure such as Map, List, or Set.</p>\n"},"signatures":[{"params":[{"name":"maybeSeq","type":{"k":0}}],"type":{"k":1},"line":1118}]}},"of":{"call":{"doc":{"synopsis":"<p>Returns a Seq of the values provided. Alias for <code><a target=\"_self\" href=\"#/IndexedSeq/of\">IndexedSeq.of()</a></code>.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1123}]}}},"call":{"doc":{"synopsis":"<p>Creates a Seq.</p>\n","description":"<p>Returns a particular kind of <code><span class=\"token qualifier\" >Seq</span></code> based on the input.</p>\n<ul>\n<li>If a <code><span class=\"token qualifier\" >Seq</span></code>, that same <code><span class=\"token qualifier\" >Seq</span></code>.</li>\n<li>If an <code><a target=\"_self\" href=\"#/Iterable\">Iterable</a></code>, a <code><span class=\"token qualifier\" >Seq</span></code> of the same kind (Keyed, Indexed, or Set).</li>\n<li>If an Array-like, an <code><a target=\"_self\" href=\"#/IndexedSeq\">IndexedSeq</a></code>.</li>\n<li>If an Object with an Iterator, an <code><a target=\"_self\" href=\"#/IndexedSeq\">IndexedSeq</a></code>.</li>\n<li>If an Iterator, an <code><a target=\"_self\" href=\"#/IndexedSeq\">IndexedSeq</a></code>.</li>\n<li>If an Object, a <code><a target=\"_self\" href=\"#/KeyedSeq\">KeyedSeq</a></code>.</li>\n</ul>\n"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1129},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1144},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1145},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1146},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":3},{"k":7,"param":"V"}]},"line":1147},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1148},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1149}]},"interface":{"line":1150,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#size":{"line":1152,"type":{"k":2}}}},{"title":"Force evaluation","members":{"#cacheResult":{"doc":{"synopsis":"<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a target=\"_self\" href=\"#/Seq/join\">join</a></code> iterates the Seq of three values.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If you know a <code><span class=\"token qualifier\" >Seq</span></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >cacheResult<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nsquares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span><span class=\"token function\" >join<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p>\n<p>Note: after calling <code>cacheResult</code>, a Seq will always have a <code><a target=\"_self\" href=\"#/Seq/size\">size</a></code>.</p>\n"},"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1164}]}}}]}},"KeyedSeq":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> which represents key-value pairs.</p>\n"},"module":{},"call":{"doc":{"synopsis":"<p>Always returns a KeyedSeq, if input is not keyed, expects an\niterable of [K, V] tuples.</p>\n"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1196},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1202},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1203},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1204},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":3},{"k":7,"param":"V"}]},"line":1205},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1206},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1207}]},"interface":{"line":1208,"typeParams":["K","V"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns itself</p>\n"},"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1210}]}}}]}},"IndexedSeq":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n"},"module":{"of":{"call":{"doc":{"synopsis":"<p>Provides an IndexedSeq of the values provided.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1222}]}}},"call":{"doc":{"synopsis":"<p>Always returns IndexedSeq, discarding associated keys and\nsupplying incrementing indices.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1228},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1234},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1235},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":0}]},"line":1236},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1237},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1238},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1239}]},"interface":{"line":1240,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns itself</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":1242}]}}}]}},"SetSeq":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> which represents a set of values.</p>\n","description":"<p>Because <code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> are often lazy, <code><span class=\"token qualifier\" >Set</span><span class=\"token qualifier\" >Seq</span></code> does not provide the same guarantee\nof value uniqueness as the concrete <code><a target=\"_self\" href=\"#/Set\">Set</a></code>.</p>\n"},"module":{"of":{"call":{"doc":{"synopsis":"<p>Returns a SetSeq of the provided values</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1256}]}}},"call":{"doc":{"synopsis":"<p>Always returns a SetSeq, discarding associated indices or keys.</p>\n"},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1262},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1267},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1268},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":0}]},"line":1269},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1270},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1271},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1272}]},"interface":{"line":1273,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns itself</p>\n"},"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":1275}]}}}]}},"Iterable":{"doc":{"synopsis":"<p>The <code><span class=\"token qualifier\" >Iterable</span></code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Iterable methods (such as <code><a target=\"_self\" href=\"#/Iterable/map\">map</a></code> and <code><a target=\"_self\" href=\"#/Iterable/filter\">filter</a></code>).</p>\n","description":"<p>Note: An iterable is always iterated in the same order, however that order\nmay not always be well defined, as is the case for the <code><a target=\"_self\" href=\"#/Map\">Map</a></code> and <code><a target=\"_self\" href=\"#/Set\">Set</a></code>.</p>\n"},"module":{"isIterable":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeIterable</span></code> is an Iterable, or any of its subclasses.</p>\n"},"signatures":[{"params":[{"name":"maybeIterable","type":{"k":0}}],"type":{"k":1},"line":1292}]}},"isKeyed":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeKeyed</span></code> is a KeyedIterable, or any of its subclasses.</p>\n"},"signatures":[{"params":[{"name":"maybeKeyed","type":{"k":0}}],"type":{"k":1},"line":1296}]}},"isIndexed":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeIndexed</span></code> is a IndexedIterable, or any of its subclasses.</p>\n"},"signatures":[{"params":[{"name":"maybeIndexed","type":{"k":0}}],"type":{"k":1},"line":1301}]}},"isAssociative":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeAssociative</span></code> is either a keyed or indexed Iterable.</p>\n"},"signatures":[{"params":[{"name":"maybeAssociative","type":{"k":0}}],"type":{"k":1},"line":1306}]}},"isOrdered":{"call":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">maybeOrdered</span></code> is an Iterable where iteration order is well\ndefined. True for IndexedIterable as well as OrderedMap and OrderedSet.</p>\n"},"signatures":[{"params":[{"name":"maybeOrdered","type":{"k":0}}],"type":{"k":1},"line":1311}]}}},"call":{"doc":{"synopsis":"<p>Creates an Iterable.</p>\n","description":"<p>The type of Iterable created is based on the input.</p>\n<ul>\n<li>If an <code><span class=\"token qualifier\" >Iterable</span></code>, that same <code><span class=\"token qualifier\" >Iterable</span></code>.</li>\n<li>If an Array-like, an <code><a target=\"_self\" href=\"#/IndexedIterable\">IndexedIterable</a></code>.</li>\n<li>If an Object with an Iterator, an <code><a target=\"_self\" href=\"#/IndexedIterable\">IndexedIterable</a></code>.</li>\n<li>If an Iterator, an <code><a target=\"_self\" href=\"#/IndexedIterable\">IndexedIterable</a></code>.</li>\n<li>If an Object, a <code><a target=\"_self\" href=\"#/KeyedIterable\">KeyedIterable</a></code>.</li>\n</ul>\n<p>This methods forces the conversion of Objects and Strings to Iterables.\nIf you want to ensure that a Iterable of one item is returned, use\n<code><a target=\"_self\" href=\"#/Seq/of\">Seq.of</a></code>.</p>\n"},"signatures":[{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1318},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1335},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":3},{"k":7,"param":"V"}]},"line":1336},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1337},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":1338},{"typeParams":["V"],"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"V"}]},"line":1339}]},"interface":{"line":1340,"typeParams":["K","V"],"groups":[{"title":"Value equality","members":{"#equals":{"doc":{"synopsis":"<p>True if this and the other Iterable have value equality, as defined\nby <code><a target=\"_self\" href=\"#/is\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >is<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n"},"signatures":[{"params":[{"name":"other","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1342}]}}},{"title":"Reading values","members":{"#get":{"doc":{"synopsis":"<p>Returns the value associated with the provided key, or notSetValue if\nthe Iterable does not contain this key.</p>\n","description":"<p>Note: it is possible a key may be associated with an <code><span class=\"token primitive\" >undefined</span></code> value,\nso if <code><span class=\"t param\">notSetValue</span></code> is not provided and this method returns <code><span class=\"token primitive\" >undefined</span></code>,\nthat does not guarantee the key was not found.</p>\n"},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1353}]},"#has":{"doc":{"synopsis":"<p>True if a key exists within this <code><span class=\"token qualifier\" >Iterable</span></code>.</p>\n"},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":1},"line":1366}]},"#contains":{"doc":{"synopsis":"<p>True if a value exists within this <code><span class=\"token qualifier\" >Iterable</span></code>.</p>\n"},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":1},"line":1371}]},"#first":{"doc":{"synopsis":"<p>The first value in the Iterable.</p>\n"},"signatures":[{"type":{"k":7,"param":"V"},"line":1376}]},"#last":{"doc":{"synopsis":"<p>The last value in the Iterable.</p>\n"},"signatures":[{"type":{"k":7,"param":"V"},"line":1381}]}}},{"title":"Reading deep values","members":{"#getIn":{"doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Iterables.</p>\n"},"signatures":[{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1386},{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1395}]},"#hasIn":{"doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nIterables results in a set value.</p>\n"},"signatures":[{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1396},{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1402}]}}},{"title":"Conversion to JavaScript types","members":{"#toJS":{"doc":{"synopsis":"<p>Deeply converts this Iterable to equivalent JS.</p>\n","description":"<p><code><span class=\"token qualifier\" >Indexed</span><span class=\"token qualifier\" >Iterables</span></code>, and <code><span class=\"token qualifier\" >Set</span><span class=\"token qualifier\" >Iterables</span></code> become Arrays, while\n<code><span class=\"token qualifier\" >Keyed</span><span class=\"token qualifier\" >Iterables</span></code> become Objects.</p>\n"},"signatures":[{"type":{"k":0},"line":1403}]},"#toArray":{"doc":{"synopsis":"<p>Shallowly converts this iterable to an Array, discarding keys.</p>\n"},"signatures":[{"type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]},"line":1414}]},"#toObject":{"doc":{"synopsis":"<p>Shallowly converts this Iterable to an Object.</p>\n","description":"<p>Throws if keys are not strings.</p>\n"},"signatures":[{"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]},"line":1419}]}}},{"title":"Conversion to Collections","members":{"#toMap":{"doc":{"synopsis":"<p>Converts this Iterable to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >Map<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toKeyedSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1426}]},"#toOrderedMap":{"doc":{"synopsis":"<p>Converts this Iterable to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >OrderedMap<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toKeyedSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1437}]},"#toSet":{"doc":{"synopsis":"<p>Converts this Iterable to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >Set<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >)</span></code>, but provided to allow for\nchained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"V"}]},"line":1445}]},"#toOrderedSet":{"doc":{"synopsis":"<p>Converts this Iterable to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >OrderedSet<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >valueSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"V"}]},"line":1454}]},"#toList":{"doc":{"synopsis":"<p>Converts this Iterable to a List, discarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >List<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >)</span></code>, but provided to allow\nfor chained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"V"}]},"line":1463}]},"#toStack":{"doc":{"synopsis":"<p>Converts this Iterable to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\" >Stack<span class=\"token punctuation\" >(</span></span><span class=\"token var\" >this</span><span class=\"token punctuation\" >)</span></code>, but provided to allow for\nchained expressions.</p>\n"},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"V"}]},"line":1471}]}}},{"title":"Conversion to Seq","members":{"#toSeq":{"doc":{"synopsis":"<p>Converts this Iterable to a Seq of the same kind (indexed,\nkeyed, or set).</p>\n"},"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1480}]},"#toKeyedSeq":{"doc":{"synopsis":"<p>Returns a KeyedSeq from this Iterable where indices are treated as keys.</p>\n","description":"<p>This is useful if you want to operate on an\nIndexedIterable and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Iterable.</p>\n<p>Example:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nindexedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toString<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq [ 'B' ]\n</span><span class=\"token keyword\" >var</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >toKeyedSeq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nkeyedSeq<span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >toString<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Seq { 1: 'B' }</span></code>"},"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1489}]},"#toIndexedSeq":{"doc":{"synopsis":"<p>Returns an IndexedSeq of the values of this Iterable, discarding keys.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"V"}]},"line":1508}]},"#toSetSeq":{"doc":{"synopsis":"<p>Returns a SetSeq of the values of this Iterable, discarding keys.</p>\n"},"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"V"}]},"line":1513}]}}},{"title":"Iterators","members":{"#keys":{"doc":{"synopsis":"<p>An iterator of this <code><span class=\"token qualifier\" >Iterable</span></code>&#39;s keys.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"K"}]},"line":1518}]},"#values":{"doc":{"synopsis":"<p>An iterator of this <code><span class=\"token qualifier\" >Iterable</span></code>&#39;s values.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"V"}]},"line":1526}]},"#entries":{"doc":{"synopsis":"<p>An iterator of this <code><span class=\"token qualifier\" >Iterable</span></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >]</span></code> tuples.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1531}]}}},{"title":"Iterables (Seq)","members":{"#keySeq":{"doc":{"synopsis":"<p>Returns a new IndexedSeq of the keys of this Iterable,\ndiscarding values.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"K"}]},"line":1536}]},"#valueSeq":{"doc":{"synopsis":"<p>Returns an IndexedSeq of the values of this Iterable, discarding keys.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"V"}]},"line":1545}]},"#entrySeq":{"doc":{"synopsis":"<p>Returns a new IndexedSeq of [key, value] tuples.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1550}]}}},{"title":"Sequence algorithms","members":{"#map":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 10, b: 20 }</span></code>"},"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"M"}]},"line":1555}]},"#filter":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns true.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >filter<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { b: 2, d: 4 }</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1571}]},"#filterNot":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span>b<span class=\"token punctuation\" >:</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span>c<span class=\"token punctuation\" >:</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span>d<span class=\"token punctuation\" >:</span><span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >filterNot<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { a: 1, c: 3 }</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1584}]},"#reverse":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type in reverse order.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1597}]},"#sort":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code><span class=\"token function\" >comparator<span class=\"token punctuation\" >(</span></span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span><span class=\"token function\" >sort<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n"},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1602}]},"#sortBy":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Iterable/sort\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >sortBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1621}]},"#groupBy":{"doc":{"synopsis":"<p>Returns a <code><a target=\"_self\" href=\"#/KeyedIterable\">KeyedIterable</a></code> of <code><span class=\"token qualifier\" >Keyed</span><span class=\"token qualifier\" >Iterables</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is always an eager operation.</p>\n"},"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"G"},{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]},"line":1633}]}}},{"title":"Side effects","members":{"#forEach":{"doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Iterable.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n"},"signatures":[{"params":[{"name":"sideEffect","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1644}]}}},{"title":"Creating subsets","members":{"#slice":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type representing a portion of this\nIterable from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Iterable. e.g.\n<code><span class=\"token function\" >slice<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Iterable of the last two entries. If it is not\nprovided the new Iterable will begin at the beginning of this Iterable.</p>\n<p>If end is negative, it is offset from the end of the Iterable. e.g.\n<code><span class=\"token function\" >slice<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns an Iterable of everything but the last entry. If\nit is not provided, the new Iterable will continue through the end of\nthis Iterable.</p>\n<p>If the requested slice is equivalent to the current Iterable, then it\nwill return itself.</p>\n"},"signatures":[{"params":[{"name":"begin","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1659}]},"#rest":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe first.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1680}]},"#butLast":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe last.</p>\n"},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1686}]},"#skip":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n"},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1692}]},"#skipLast":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n"},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1698}]},"#skipWhile":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skipWhile<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'cat', 'hat', 'god' ]</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1704}]},"#skipUntil":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >skipUntil<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'hat', 'god' ]</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1718}]},"#take":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n"},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1732}]},"#takeLast":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n"},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1738}]},"#takeWhile":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >takeWhile<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 'dog', 'frog' ]</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1744}]},"#takeUntil":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type which contains entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'god'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >takeUntil<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >match<span class=\"token punctuation\" >(</span></span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ['dog', 'frog']</span></code>"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1758}]}}},{"title":"Combination","members":{"#concat":{"doc":{"synopsis":"<p>Returns a new Iterable of the same type with other values and\niterable-like concatenated to this one.</p>\n","description":"<p>For Seqs, all entries will be present in\nthe resulting iterable, even if they have the same key.</p>\n"},"signatures":[{"params":[{"name":"valuesOrIterables","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1771}]},"#flatten":{"doc":{"synopsis":"<p>Flattens nested Iterables.</p>\n","description":"<p>Will deeply flatten the Iterable by default, returning an Iterable of the\nsame type, but a <code><span class=\"t param\">depth</span></code> can be provided in the form of a number or\nboolean (where true means to shallowly flatten one level). A depth of 0\n(or shallow: false) will deeply flatten.</p>\n<p>Flattens only others Iterable, not Arrays or Objects.</p>\n<p>Note: <code><span class=\"token function\" >flatten<span class=\"token punctuation\" >(</span></span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code> operates on Iterable<any, Iterable<K, V>&gt; and\nreturns Iterable<K, V></p>\n"},"signatures":[{"params":[{"name":"depth","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":1783},{"params":[{"name":"shallow","optional":true,"type":{"k":1}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":1798}]},"#flatMap":{"doc":{"synopsis":"<p>Flat-maps the Iterable, returning an Iterable of the same type.</p>\n","description":"<p>Similar to <code>iter<span class=\"token punctuation\" >.</span><span class=\"token function\" >map<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flatten<span class=\"token punctuation\" >(</span></span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n"},"signatures":[{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":1799},{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":1809}]}}},{"title":"Reducing a value","members":{"#reduce":{"doc":{"synopsis":"<p>Reduces the Iterable to a value by calling the <code><span class=\"t param\">reducer</span></code> for every entry\nin the Iterable and passing along the reduced value.</p>\n","notes":[{"name":"see","body":"<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array#reduce</a></code>.</p>\n"}],"description":"<p>If <code><span class=\"t param\">initialReduction</span></code> is not provided, or is null, the first item in the\nIterable will be used.</p>\n"},"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":1813}]},"#reduceRight":{"doc":{"synopsis":"<p>Reduces the Iterable in reverse (from the right side).</p>\n","description":"<p>Note: Similar to this.reverse().reduce(), and provided for parity\nwith <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">Array#reduceRight</a></code>.</p>\n"},"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":1831}]},"#every":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Iterable.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1843}]},"#some":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Iterable.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":1851}]},"#join":{"doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n"},"signatures":[{"params":[{"name":"separator","optional":true,"type":{"k":3}}],"type":{"k":3},"line":1859}]},"#count":{"doc":{"synopsis":"<p>Returns the size of this Iterable.</p>\n","description":"<p>Regardless of if this Iterable can describe its size lazily (some Seqs\ncannot), this method will always return the correct size. E.g. it\nevaluates a lazy <code><a target=\"_self\" href=\"#/Seq\">Seq</a></code> if necessary.</p>\n<p>If <code><span class=\"t param\">predicate</span></code> is provided, then this returns the count of entries in the\nIterable for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n"},"signatures":[{"type":{"k":2},"line":1865},{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1877}]},"#countBy":{"doc":{"synopsis":"<p>Returns a <code><a target=\"_self\" href=\"#/KeyedSeq\">KeyedSeq</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n"},"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"G"},{"k":2}]},"line":1881}]}}},{"title":"Search for value","members":{"#find":{"doc":{"synopsis":"<p>Returns the value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1892}]},"#findLast":{"doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1904}]},"#max":{"doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a target=\"_self\" href=\"#/Iterable/sort\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code>a <span class=\"token operator\" >></span> b</code>.</p>\n"},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1915}]},"#maxBy":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Iterable/max\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >maxBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1924}]},"#min":{"doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a target=\"_self\" href=\"#/Iterable/sort\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code>a <span class=\"token operator\" >></span> b</code>.</p>\n"},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1936}]},"#minBy":{"doc":{"synopsis":"<p>Like <code><a target=\"_self\" href=\"#/Iterable/min\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span><span class=\"token function\" >minBy<span class=\"token punctuation\" >(</span></span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":1945}]}}},{"title":"Comparison","members":{"#isSubset":{"doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> contains every value in this Iterable.</p>\n"},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1957},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1965}]},"#isSuperset":{"doc":{"synopsis":"<p>True if this Iterable contains every value in <code><span class=\"t param\">iter</span></code>.</p>\n"},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1966},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1971}]}}}]}},"KeyedIterable":{"doc":{"synopsis":"<p>Keyed Iterables have discrete keys tied to each value.</p>\n","description":"<p>When iterating <code><span class=\"token qualifier\" >Keyed</span><span class=\"token qualifier\" >Iterable</span></code>, each iteration will yield a <code><span class=\"token punctuation\" >[</span>K<span class=\"token punctuation\" >,</span> V<span class=\"token punctuation\" >]</span></code> tuple,\nin other words, <code><a target=\"_self\" href=\"#/Iterable/entries\">Iterable#entries</a></code> is the default iterator for Keyed\nIterables.</p>\n"},"module":{},"call":{"doc":{"synopsis":"<p>Creates a KeyedIterable</p>\n","description":"<p>Similar to <code><a target=\"_self\" href=\"#/Iterable\">Iterable()</a></code>, however it expects iterable-likes of [K, V]\ntuples if not constructed from a KeyedIterable or JS Object.</p>\n"},"signatures":[{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1994},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2002},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2003},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":3},{"k":7,"param":"V"}]},"line":2004},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2005},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2006}]},"interface":{"line":2007,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns KeyedSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2009}]}}},{"title":"Sequence functions","members":{"#flip":{"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type where the keys and values\nhave been flipped.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'y'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >flip<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { z: 'a', y: 'b' }</span></code>"},"signatures":[{"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"V"},{"k":7,"param":"K"}]},"line":2015}]},"#mapKeys":{"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type with keys passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >mapKeys<span class=\"token punctuation\" >(</span></span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { A: 1, B: 2 }</span></code>"},"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"M"},{"k":7,"param":"V"}]},"line":2027}]},"#mapEntries":{"doc":{"synopsis":"<p>Returns a new KeyedIterable of the same type with entries\n([key, value] tuples) passed through a <code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span><span class=\"token function\" >mapEntries<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>k<span class=\"token punctuation\" >,</span> v<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >[</span>k<span class=\"token punctuation\" >.</span><span class=\"token function\" >toUpperCase<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { A: 2, B: 4 }</span></code>"},"signatures":[{"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"entry","optional":true,"type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Array","args":[{"k":0}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"KM"},{"k":7,"param":"VM"}]},"line":2041}]}}},{"title":"Search for value","members":{"#keyOf":{"doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n"},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":2059}]},"#lastKeyOf":{"doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n"},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":2067}]},"#findKey":{"doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":2072}]},"#findLastKey":{"doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":2080}]}}}]}},"IndexedIterable":{"doc":{"synopsis":"<p>Indexed Iterables have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a target=\"_self\" href=\"#/KeyedIterable\">KeyedIterable</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Iterables such as <code><a target=\"_self\" href=\"#/IndexedIterable/indexOf\">indexOf</a></code>.</p>\n","description":"<p>Unlike JavaScript arrays, <code><span class=\"token qualifier\" >Indexed</span><span class=\"token qualifier\" >Iterable</span></code>s are always dense. &quot;Unset&quot;\nindices and <code><span class=\"token primitive\" >undefined</span></code> indices are indistinguishable, and all indices from\n0 to <code>size</code> are visited when iterated.</p>\n<p>All IndexedIterable methods return re-indexed Iterables. In other words,\nindices always start at 0 and increment until size. If you wish to\npreserve indices, using them as keys, convert to a KeyedIterable by calling\n<code><a target=\"_self\" href=\"#/IndexedIterable/toKeyedSeq\">toKeyedSeq</a></code>.</p>\n"},"module":{},"call":{"doc":{"synopsis":"<p>Creates a new IndexedIterable.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2109},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2114},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":0}]},"line":2115},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2116},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2117},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2118}]},"interface":{"line":2119,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":2},{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","members":{"#get":{"doc":{"synopsis":"<p>Returns the value associated with the provided index, or notSetValue if\nthe index is beyond the bounds of the Iterable.</p>\n","description":"<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nIterable. <code>s<span class=\"token punctuation\" >.</span><span class=\"token function\" >get<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> gets the last item in the Iterable.</p>\n"},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"},"line":2121}]}}},{"title":"Conversion to Seq","members":{"#toSeq":{"doc":{"synopsis":"<p>Returns IndexedSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":2132}]},"#fromEntrySeq":{"doc":{"synopsis":"<p>If this is an iterable of [key, value] entry tuples, it will return a\nKeyedSeq of those entries.</p>\n"},"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":0},{"k":0}]},"line":2141}]}}},{"title":"Combination","members":{"#interpose":{"doc":{"synopsis":"<p>Returns an Iterable of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Iterable.</p>\n"},"signatures":[{"params":[{"name":"separator","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2147}]},"#splice":{"doc":{"synopsis":"<p>Splice returns a new indexed Iterable by replacing a region of this\nIterable with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n","description":"<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nIterable. <code>s<span class=\"token punctuation\" >.</span><span class=\"token function\" >splice<span class=\"token punctuation\" >(</span></span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> splices after the second to last item.</p>\n<code class=\"codeBlock\"><span class=\"token function\" >Seq<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span><span class=\"token string\" >'d'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >splice<span class=\"token punctuation\" >(</span></span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq ['a', 'q', 'r', 's', 'd']</span></code>"},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"removeNum","type":{"k":2}},{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]},"line":2156}]}}},{"title":"Search for value","members":{"#indexOf":{"doc":{"synopsis":"<p>Returns the first index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n"},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":2174}]},"#lastIndexOf":{"doc":{"synopsis":"<p>Returns the last index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n"},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":2183}]},"#findIndex":{"doc":{"synopsis":"<p>Returns the first index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2189}]},"#findLastIndex":{"doc":{"synopsis":"<p>Returns the last index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2198}]}}}]}},"SetIterable":{"doc":{"synopsis":"<p>Set Iterables only represent values. They have no associated keys or\nindices. Duplicate values are possible in SetSeqs, however the\nconcrete <code><a target=\"_self\" href=\"#/Set\">Set</a></code> does not allow duplicate values.</p>\n","description":"<p>Iterable methods on SetIterable such as <code><a target=\"_self\" href=\"#/SetIterable/map\">map</a></code> and <code><a target=\"_self\" href=\"#/SetIterable/forEach\">forEach</a></code> will provide\nthe value as both the first and second arguments to the provided function.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> seq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >of<span class=\"token punctuation\" >(</span></span><span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span><span class=\"token function\" >equal<span class=\"token punctuation\" >(</span></span>seq<span class=\"token punctuation\" >.</span><span class=\"token function\" >every<span class=\"token punctuation\" >(</span></span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >,</span> k<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> k<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>"},"module":{},"call":{"doc":{"synopsis":"<p>Similar to <code><a target=\"_self\" href=\"#/Iterable\">Iterable()</a></code>, but always returns a SetIterable.</p>\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2223},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2228},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":0}]},"line":2229},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2230},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2231},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]},"line":2232}]},"interface":{"line":2233,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns SetSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":2235}]}}}]}},"Collection":{"doc":{"synopsis":"<p>Collection is the abstract base class for concrete data structures. It\ncannot be constructed directly.</p>\n","description":"<p>Implementations should extend one of the subclasses, <code><a target=\"_self\" href=\"#/KeyedCollection\">KeyedCollection</a></code>,\n<code><a target=\"_self\" href=\"#/IndexedCollection\">IndexedCollection</a></code>, or <code><a target=\"_self\" href=\"#/SetCollection\">SetCollection</a></code>.</p>\n"},"module":{},"interface":{"line":2252,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#size":{"line":2254,"type":{"k":2}}}}]}},"KeyedCollection":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Collection\">Collection</a></code> which represents key-value pairs.</p>\n"},"module":{},"interface":{"line":2266,"typeParams":["K","V"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"KeyedIterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns KeyedSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"KeyedSeq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2268}]}}}]}},"IndexedCollection":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Collection\">Collection</a></code> which represents ordered indexed values.</p>\n"},"module":{},"interface":{"line":2281,"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"IndexedIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns IndexedSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"IndexedSeq","args":[{"k":7,"param":"T"}]},"line":2283}]}}}]}},"SetCollection":{"doc":{"synopsis":"<p><code><a target=\"_self\" href=\"#/Collection\">Collection</a></code> which represents values, unassociated with keys or indices.</p>\n","description":"<p><code><span class=\"token qualifier\" >Set</span><span class=\"token qualifier\" >Collection</span></code> implementations should guarantee value uniqueness.</p>\n"},"module":{},"interface":{"line":2298,"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"SetIterable","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"<p>Returns SetSeq.</p>\n"},"signatures":[{"type":{"k":8,"name":"SetSeq","args":[{"k":7,"param":"T"}]},"line":2300}]}}}]}}}}}